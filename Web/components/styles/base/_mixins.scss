// Import Bourbon
@import "../../libs/bourbon/app/assets/stylesheets/_bourbon";

// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    transform: translateX(-50%) translateY(-50%);
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  }
}

// border radius

@mixin border-radius($radius:.25em) {
  border-radius: $radius;
}

// antialiasing mode font rendering

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// clearfix

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: block;
  }
}

// color tint and shade

@function shade(
    $color,
    $percent
  ) {

  @return mix(#000, $color, $percent);
}
@function tint(
    $color,
    $percent
  ) {

  @return mix(#fff, $color, $percent);
}



// breakpoints
$XS:		320px;
$S:     480px;   
$M:     600px;     
$L:			768px;
$XL:    1024px;
$XXL:   1400px;


// media queries

@mixin MQ($canvas) {
	@if $canvas == XS {
   @media only screen and (min-width: $XS) { @content; } 
  }
  @else if $canvas == S {
   @media only screen and (min-width: $S) { @content; } 
  }
  @else if $canvas == M {
   @media only screen and (min-width: $M) { @content; } 
  }
  @else if $canvas == L {
   @media only screen and (min-width: $L) { @content; } 
  }
  @else if $canvas == XL {
   @media only screen and (min-width: $XL) { @content; } 
  }
  @else if $canvas == XXL {
   @media only screen and (min-width: $XXL) { @content; } 
  }
  @else {
  	@media only screen and (min-width: $canvas) { @content; } 
  }
}

// super light grid system

@mixin column($percentage, $float-direction:left) {
  width: 100% * $percentage;
  float: $float-direction;
}



@function em($px, $base: 16px) {
	@return ($px / $base) * 1em;
}


// --- Gradient Mixin ---

@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin tp--linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1) !important;
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops) !important;
  background: linear-gradient($direction, $color-stops) !important;
}

@mixin tp--linear-gradient-with-image($img-url, $direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1) !important;
  background: url(#{$img-url}), -webkit-linear-gradient(legacy-direction($direction), $color-stops) !important;
  background: url(#{$img-url}), linear-gradient($direction, $color-stops) !important;
}




// --- Vertical Aligment ---

@mixin tp--vertical-align($prefix, $min-width) {
    @media (min-width: $min-width) {

			.tp--col-#{$prefix}-vertical-align {
				font-size: 0;
        
        [class*=col-] {
        	display: inline-block;
          vertical-align: middle;
          float: none;
          font-size: $font-size-base;
        }

        &.tp--vertical-align-intro {
        	[class*=col-] {
        		position: relative;
				    top: 50%;
				    transform: translateY(-50%);
				    font-size: $font-size-base;
				    display: block;
				    float: left;
				    margin-top: -50px;
        	}

        }
      }
        
    }
}

@include tp--vertical-align(lg, $screen-lg);
@include tp--vertical-align(md, $screen-md);
@include tp--vertical-align(sm, $screen-sm);
@include tp--vertical-align(xs, $screen-xs);
@include tp--vertical-align(xxs, $XS);